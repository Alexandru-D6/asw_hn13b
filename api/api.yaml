openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker news - HBN13
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker news** deployed at <https://asw-api-demo.herokuapp.com/>. <br>All operations are executable. Only one operation requires authentication: `deleteComment`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the comment."
servers:
  - url: 'https://asw-api-demo.herokuapp.com/'
paths:
  /comments:
    post:
      tags:
      - comments
      summary: Adds a new Comment to the Hacker News
      operationId: addComment
      requestBody:
        description: Provide the author & content of the new Comment
        content:
          application/json:
            schema:
              required:
              - author
              - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  /comment/{id}:
    get:
      tags:
      - comments
      summary: Finds a Commnent by its ID
      description: Returns a single Comment
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - comments
      summary: Deletes a Comment
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Comment deleted
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /comments/{id}/edit:
    post:
      tags:
      - comments
      summary: Edit a Comment given its ID
      operationId: editComment
      requestBody:
        description: Provide the author & content of the new Comment
        content:
          application/json:
            schema:
              required:
              - author
              - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  
  /comments/{id}/upvote:
    put:
      tags:
      - comments
      summary: Upvote a Comment
      operationId: upvoteComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to upvote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Upvoted Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /comments/{id}/unvote:
    put:
      tags:
      - comments
      summary: Unvote a Comment
      operationId: unvoteComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to unvote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Unvoted Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/votedComments:
    get:
      tags:
      - user
      summary: Retrieves all comments voted by a user
      description: Returns all the comments voted of a user
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/comments:
    get:
      tags:
      - user
      summary: Retrieves all comments done by a user
      description: Returns all the comments of a user
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/edit:
    post:
      tags:
      - user
      summary: Edit about information
      description: Returns ??
      operationId: getCommentById ??
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        author:
          type: string
          minLength: 4
          example: 'My name'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw-api-demo.herokuapp.com/comment/2'
    AddCommentResult:
      type: object
      properties:
        new_comment:
          $ref: '#/components/schemas/Comment'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No Comment with that ID"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header