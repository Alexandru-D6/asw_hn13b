openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker news - HBN13
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker news** deployed at <https://asw-api-demo.herokuapp.com/>. <br>All operations are executable. Only one operation requires authentication: `deleteComment`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the comment."
servers:
  - url: 'https://http://54.198.177.164:8080/API/v1.0'
paths:
  /submissions/news:
    get:
      tags:
      - Submissions
      summary: Llistat de submissions de tipus news.
      description: Retorna el llistat de submissions ordenat segons el número de likes.
      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObtainNews'
                
  /submissions/newest:
    get:
      tags:
      - Submissions
      summary: Llistat de submissions de tipus newest.
      description: Retorna el llistat de submissions ordenat de més recents a menys. 
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObtainNewest'
                
  /submissions/ask:
    get:
      tags:
      - Submissions
      summary: Llistat de submissions de tipus ask.
      description: Retorna el llistat de publicacions de tipus ask de l'aplicació.
      responses:
        '200':
          description: Seccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObtainNews'
  
  /submission/{submissionId}:
    get:
      tags:
      - Submissions
      summary: Troba una submission segons el seu id.
      description: Retorna el contingut de la publicacio i tots els seus comentaris. 
      parameters:
      - name: submissionId
        in: path
        description: ID de la Submission a buscar
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'

        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
                  
  /submission/{id}/edit:
    put:
      tags:
        - Submissions
      summary: Editeu un comentari donat el seu identificador
      parameters:
        - name: id
          in: path
          description: ID del commentari a editar
          required: true
          schema:
            type: string
      requestBody:
        description: Proporcioneu el contingut dels camps a editar
        content:
          application/json:
            schema:
              required:
                - title
                - text
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 240
                  example: Change 1
                text:
                  type: string
                  example: Bon dia
        required: true
      responses:
        '203':
          description: Submission edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/examples/error400'
              examples:
                MissingID:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "A valid submission id is required"
                    }
                MissingAskContent:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "At least one of both title or text is required in order to update the ask submission."
                    }
                MissingURLContent:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "In order to update the url submission, a new title is needed"
                    }
                NoTxtForURL:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "A text field is found but the id corresponds to an URL submission."
                    }
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                Unauthorized:
                  value: |-
                    {
                        "status": 401,
                        "error": "Unauthorized",
                        "message": "This action requires an apiKEY"
                    }
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                IncorrectApiKey:
                  value: |-
                    {
                        "status": 403,
                        "error": "Forbidden",
                        "message": "This apiKey doesn't have the permission to edit this submission"
                    }
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                NotFound:
                  value: |-
                    {
                        "status": 404,
                        "error": "Not Found",
                        "message": "Comment with id: 123 doesn't exist in our database"
                    }
      security:
      - ApiKeyAuth: []
    
  
  /submissions/create:
    post:
      tags:
      - Submissions
      summary: Crea una submission
      description: Crea una nova publicació de l'usuari que l'esta creant. 
      requestBody:
        description: Es requereix el titol, el text o la url
        content: 
          application/json:
            schema:
              required:
              - title
              - text
              - url
              type: object
              properties:
                title: 
                  type: string
                  minLength: 4
                  example: Hello world!
                text: 
                  type: string
                  minLength: 4
                  example: Today is the second delivery
                url:
                  type: string
                  example: https://www.eunoia.es/
      responses:
        '200':
          description: Created submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
              examples:
                URLcreated:
                  value: |-
                    {
                        "status": 200,
                        "message": "A new URL submission has been created"
                    }
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                MissingContent:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "Not text or url has been introduced."
                    }
                existingURL:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "The introduced url already exists in other submission."
                    }
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  value: |-
                    {
                        "status": 404,
                        "error": "Not Found",
                        "message": "This apiKey doesn't exist."
                    }
      security:
      - ApiKeyAuth: []
          
          
  /submissions/{id}/upvote:
    put:
      tags:
      - Submissions
      summary: Vota una publicació
      description: Vota una publicació que d'un altre usuari
      parameters:
      - name: id
        in: path
        description: ID de la submission a votar. 
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Submission voted
          content:
            application/json:
              examples:
                Correct:
                  value: |-
                    {
                        "status": 200,
                        "message": "The submission has been upvoted correctly."
                    }
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
      security:
      - ApiKeyAuth: []
              
              
  /submission/{id}/unvote:
    put:
      tags:
      - Submissions
      summary: Desfà la votació d'una publicació
      description: Borra la votació d'una publicació que ha votat anteriorment.
      parameters:
      - name: id
        in: path
        description: ID de la submission a desvotar. 
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Submission unvoted
          content:
            application/json:
              examples:
                Unvoted:
                  value: |-
                    {
                        "status": 200,
                        "message": "The submission has been unvoted correctly."
                    }
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                MissingID:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "A valid submission id is required."
                    }
                DeletedSubmission:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "The id corresponds to a deleted submission."
                    }
                NotUpvoted:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "The submission is not upvoted."
                    }
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorResult:
                  $ref: '#/components/examples/error401'
        '403':
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorResult:
                  $ref: '#/components/examples/error403'
                notAuthor:
                  value: |-
                    {
                        "status": 403,
                        "error": "Bad Request",
                        "message": "You are the author of the submission."
                    }
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorResult:
                  $ref: '#/components/examples/error404'
      security:
      - ApiKeyAuth: []
  
  /comments:
    post:
      tags:
      - comments
      summary: Adds a new Comment to the Hacker News
      operationId: addComment
      requestBody:
        description: Provide the author & content of the new Comment
        content:
          application/json:
            schema:
              required:
              - author
              - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  /comment/{id}:
    get:
      tags:
      - comments
      summary: Finds a Commnent by its ID
      description: Returns a single Comment
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - comments
      summary: Deletes a Comment
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Comment deleted
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  
  /comments/{id}/edit:
    post:
      tags:
      - comments
      summary: Edit a Comment given its ID
      operationId: editComment
      requestBody:
        description: Provide the author & content of the new Comment
        content:
          application/json:
            schema:
              required:
              - author
              - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  
  /comments/{id}/upvote:
    put:
      tags:
      - comments
      summary: Upvote a Comment
      parameters:
      - name: id
        in: path
        description: Comment id to upvote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Upvoted Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              examples:
                UpvotedComment:
                  value: |-
                    {
                        "status": 200,
                        "message": "User with id: 1 has successfully upvoted comment with id: 2",
                        "comment": {
                            "UpVotes": 1,
                            "id": 2,
                            "author": "Alexandru-D6",
                            "comment": "dfgsdgfsdfgdsfdfd",
                            "created_at": "2022-05-09T21:31:04.594Z",
                            "id_submission": 2,
                            "id_comment_father": 0,
                            "comments": []
                        }
                    }
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                Bad Request:
                  value: |-
                      {
                          "status": 400,
                          "error": "Bad Request",
                          "message": "User with id: 1 is the author of the comment with id: 1"
                      }
                      
                AlreadyUpvotedComment:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "User with id: 1 has already upvoted comment with id: 2"
                    }
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                Unauthorized:
                  value: |-
                    {
                        "status": 401,
                        "error": "Unauthorized",
                        "message": "API key not found"
                    }
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                NotFound:
                  value: |-
                    {
                        "status": 404,
                        "error": "Not Found",
                        "message": "Comment with id: 123 doesn't exist in our database"
                    }
                  
  /comments/{id}/unvote:
    put:
      tags:
      - comments
      summary: Unvote a Comment
      parameters:
      - name: id
        in: path
        description: Comment id to unvote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Unvoted Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              examples:
                Upvoted Comment:
                  value: |-
                    {
                        "status": 200,
                        "message": "User with id: 1 has successfully unvoted comment with id: 2",
                        "comment": {
                            "UpVotes": 1,
                            "id": 2,
                            "author": "Alexandru-D6",
                            "comment": "dfgsdgfsdfgdsfdfd",
                            "created_at": "2022-05-09T21:31:04.594Z",
                            "id_submission": 2,
                            "id_comment_father": 0,
                            "comments": []
                        }
                    }
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                Bad Request:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "User with id: 1 is the author of the comment with id: 1"
                    }
                Already upvoted comment:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "User with id: 1 has already unvoted comment with id: 2"
                    }
        '401':
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                Unauthorized:
                  value: |-
                    {
                        "status": 401,
                        "error": "Unauthorized",
                        "message": "API key not found"
                    }
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                Not Found:
                  value: |-
                    {
                        "status": 404,
                        "error": "Not Found",
                        "message": "Comment with id: 123 doesn't exist in our database"
                    }
  /user/{name}:
    get:
      tags:
      - user
      summary: Retrieves all comments voted by a user
      description: Returns all the comments voted of a user
      parameters:
      - name: name
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/comments:
    get:
      tags:
      - user
      summary: Retrieves all comments done by a user
      description: Returns all the comments of a user
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/edit:
    post:
      tags:
      - user
      summary: Edit about information
      description: Returns ??
      operationId: getCommentById ??
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{userID}/submissions:
    get:
      tags:
      - user
      summary: Obté el llistat de submissions de l'usuari amb userID.
      parameters:
        - name: userID
          in: path
          description: ID de l'usuari del que volem el llistat de submissions.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObtainNews'
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              examples:
                MissingID:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "A user id is required for this operation"
                    }
        
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  
  /user/{userID}/submissions/voted:
    get:
      tags:
      - user
      summary: Obté el llistat de submissions que ha votat l'usuari amb userID.
      operationId: getUserVotedSubmissions
      parameters:
        - name: userID
          in: path
          description: ID de l'usuari del que volem el llistat de submissions votades.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObtainNews'
                
        '400':
          description: 'Error: Bad Request'
          content:
            application/json:
              examples:
                MissingID:
                  value: |-
                    {
                        "status": 400,
                        "error": "Bad Request",
                        "message": "A user id is required for this operation"
                    }
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'     
  
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        author:
          type: string
          minLength: 4
          example: 'My name'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw-api-demo.herokuapp.com/comment/2'
    AddCommentResult:
      type: object
      properties:
        new_comment:
          $ref: '#/components/schemas/Comment'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
    Submission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 'Change 1'
        url:
          type: string
          example: ''
        text:
          type: string
          example: 'Bon dia'
        created_at:
          type: string
          example: '2022-05-08T19:44:15.493Z'
        UpVote:
          type: integer
          example: 78
        author_username:
          type: string
          minLength: 4
          example: 'peilinni16'
    Submission2:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          example: 'Google page'
        url:
          type: string
          example: 'google.com'
        text:
          type: string
          example: ''
        created_at:
          type: string
          example: '2022-05-11T19:44:15.493Z'
        UpVote:
          type: integer
          example: 50
        author_username:
          type: string
          minLength: 4
          example: 'peilinni16'
        
    ObtainNews:
      type: object
      properties:
        get_submissions_news:
          $ref: '#/components/schemas/Submission'
          
    ObtainNewest:
      type: object
      properties:
        get_submissions_newest:
          $ref: '#/components/schemas/Submission2'

  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You didn't provide an api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "No the ID doesn't exist"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header