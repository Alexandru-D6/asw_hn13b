openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker news - HBN13
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker news** deployed at <https://asw-api-demo.herokuapp.com/>. <br>All operations are executable. Only one operation requires authentication: `deleteComment`. In this case, you must **Authorize** your request by providing the api_key vaule you got when you created the comment."
servers:
  - url: 'https://serene-ridge-36448.herokuapp.com/'
paths:
  /submission/news:
    get:
      tags:
      - Submissions
      summary: Obté el llistat de submissions de tipus news.
      operationId: getNewsSubmissions
      responses:
        200:
          description: operació finalitzada amb éxit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTweetResult'
  /submission/newest:
    get:
      tags:
      - Submissions
      summary: Obté el llistat de submissions de tipus newest.
      operationId: getNewestSubmissions
      responses:
        200:
          description: operació finalitzada amb éxit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTweetResult'
  /submission/ask:
    get:
      tags:
      - Submissions
      summary: Obté el llistat de submissions de tipus ask.
      operationId: getAskSubmissions
      responses:
        200:
          description: operació finalitzada amb éxit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTweetResult'
  
  /submission/{submissionId}:
    get:
      tags:
      - Submissions
      summary: Troba una submission segons el seu ID.
      description: Retorna tant el contingut de a submission com tots els seus comentaris. 
      operationId: getTSubmissionById
      parameters:
      - name: submissionId
        in: path
        description: ID de la Submission a buscar
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - Submissions
      summary: Esborra la submission amb submissionId
      operationId: deleteSubmission
      parameters:
      - name: submissionId
        in: path
        description: Submission ID a esborrar
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Submission esborrat
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
    
    put:
      tags:
      - Submissions
      summary: Edita una submission
      operationId: editSubmission
      parameters:
      - name: submissionId
        in: path
        description: ID de la submission a editar
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Edited submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  
  /submission/post/:apiKey/:title/:text/{url}:
    post:
      tags:
      - Submissions
      summary: Crea una submission
      operationId: createSubmission
      parameters:
      - name: apiKey
        in: path
        description: apiKey de l'usuari que vol crear la submission
        required: true
        schema:
          type: string
      - name: title
        in: path
        description: titol de la submission a crear
        required: true
        schema:
          type: string
      - name: url
        in: query
        description: url de la submission a crear
        required: false
        schema:
          type: string
      responses:
        200:
          description: Created submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Already created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  
  /submission/vote/submissionID:
    put:
      tags:
      - Submissions
      summary: Vota una submission
      operationId: voteSubmission
      parameters:
      - name: submissionId
        in: path
        description: ID de la submission a votar. 
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Voted submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /submission/unvote/submissionID:
    put:
      tags:
      - Submissions
      summary: Desfà la votació d'una submission
      operationId: unvoteSubmission
      parameters:
      - name: submissionId
        in: path
        description: ID de la submission a desvotar. 
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Unvoted submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  
  /comments:
    post:
      tags:
      - comments
      summary: Afegeix un nou Comentari a una Submission de Hacker News
      requestBody:
        description: Proporcioneu el contingut del nou Comentari
        content:
          application/json:
            schema:
              required:
              - comment
              - id_submission
              type: object
              properties:
                id_submission:
                  type: integer
                  example: 1
                comment:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My comment'
                id_comment_father:
                  type: integer
                  example: 1
        required: true
      responses:
        201:
          description: Comentari creat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
                400_insuficient_parameters:
                  $ref: '#/components/examples/error400_insuficient_parameters'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        
  /comment/{id}:
    get:
      tags:
      - comments
      summary: Troba un Comentari pel seu identificador
      description: Retorna un únic Comentari i tots els seus fills
      parameters:
      - name: commentId
        in: path
        description: ID del Comentari a retornar
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment_with_sons'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
                400_insuficient_parameters:
                  $ref: '#/components/examples/error400_insuficient_parameters'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - comments
      summary: Esborra un Comentari
      operationId: deleteCommentById
      parameters:
      - name: commentId
        in: path
        description: ID del commentari a esborrar
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Comment deleted
          content:
            application/json: {}
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /comments/{id}/edit:
    post:
      tags:
      - comments
      summary: Edit a Comment given its ID
      operationId: editComment
      requestBody:
        description: Provide the author & content of the new Comment
        content:
          application/json:
            schema:
              required:
              - author
              - content
              type: object
              properties:
                author:
                  type: string
                  minLength: 4
                  example: 'My name'
                content:
                  type: string
                  minLength: 4
                  maxLength: 280
                  example: 'My content'
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResult'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
  
  /comments/{id}/upvote:
    put:
      tags:
      - comments
      summary: Upvote a Comment
      operationId: upvoteComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to upvote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Upvoted Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /comments/{id}/unvote:
    put:
      tags:
      - comments
      summary: Unvote a Comment
      operationId: unvoteComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to unvote
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Unvoted Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/votedComments:
    get:
      tags:
      - user
      summary: Retrieves all comments voted by a user
      description: Returns all the comments voted of a user
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/comments:
    get:
      tags:
      - user
      summary: Retrieves all comments done by a user
      description: Returns all the comments of a user
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/{id}/edit:
    post:
      tags:
      - user
      summary: Edit about information
      description: Returns ??
      operationId: getCommentById ??
      parameters:
      - name: commentId
        in: path
        description: ID of Comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  /user/submissions/userID:
    get:
      tags:
      - user
      summary: Obté el llistat de submissions de l'usuari amb userID.
      operationId: getUserSubmissions
      parameters:
        - name: userID
          in: path
          description: ID de l'usuari del que volem el llistat de submissions.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: operació finalitzada amb éxit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTweetResult'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
  
  /user/submissions/voted/userID:
    get:
      tags:
      - user
      summary: Obté el llistat de submissions que ha votat l'usuari amb userID.
      operationId: getUserVotedSubmissions
      parameters:
        - name: userID
          in: path
          description: ID de l'usuari del que volem el llistat de submissions votades.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: operació finalitzada amb éxit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTweetResult'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'     
  
components:
  schemas:    
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        author:
          type: string
          example: 'Electrike'
        comment:
          type: string
          minLength: 5
          maxLength: 256
          example: 'Ejemplo de comentario.'
        upVotes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        id_submission:
          type: integer
          format: int64
          example: 1
        id_comment_father:
          type: integer
          format: int64
          example: 2
        comments: 
          type: array
          example: []

    Comment_with_sons:
      type: object
      properties:
        status:
          type: integer
          enum: [201]
        comment:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 2
            author:
              type: string
              example: 'Electrike'
            comment:
              type: string
              minLength: 5
              maxLength: 256
              example: 'Ejemplo de comentario.'
            upVotes:
              type: integer
              format: int32
            created_at:
              type: string
              format: date-time
            id_submission:
              type: integer
              format: int64
              example: 1
            id_comment_father:
              type: integer
              format: int64
            comments: 
              type: array
              items:
                $ref: '#/components/schemas/Comment'     
    AddCommentResult:
      type: object
      properties:
        status:
          type: integer
          enum: [201]
        message:
          type: string
          enum: ["Comment with id: [id] was successfully created."]
        comment:
          $ref: '#/components/schemas/Comment'
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
    Tweet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        author:
          type: string
          minLength: 4
          example: 'My name'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw-api-demo.herokuapp.com/tweets/2'
    AddTweetResult:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Tweet'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error400_insuficient_parameters:
      value:
        status: 400
        error: "Bad Request"
        message: "Insuficient parameters, missing id_submission"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "Submission with ID:[id] doesn't exist in our data base."
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header